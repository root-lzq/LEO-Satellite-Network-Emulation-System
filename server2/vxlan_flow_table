#!/usr/bin/python3.6

#一次性配置ovs2的流表 bn --- b(2*n)

from datetime import datetime
import os
import concurrent.futures
from multiprocessing import Process

def produce_mac(i):
    # 获取docker的mac地址
    #【参数】i : int; docker序列号
    #【返回值】string : string; docker的mac地址
    array = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']
    if i >= 256:
        hundered = array[int(i/256)]
        i = i - 256 * (int(i/256))
    else:
        hundered = array[0]
    ten = array[int(i/16)]
    one = array[i%16]
    string = "00:00:00:00:0"+hundered + ":" + ten + one
    return string

def add_flow(list_link, n):
    # 将所有的流表命令拼接完毕，并放入书数组list_flow中
    # list_flow ： string 类型数组，数组的每个元素为一条流表
    #【参数】list_link : string 类型数组，数组的每个元素为通断矩阵的一行
    # 【参数】n: docker 数量

    os.system('ovs-ofctl del-flows br0')
    
    # [1, n] - [n+1, 2*n]的流表
    for i in range(n):
        s=""
        for j in range(2*n, 4*n, 2):
            if list_link[i][j]=='1':
                s=s+str(int(j/2)+1-n)+","
        if len(s):
            string = produce_mac(i+1)
            actions = string + ",actions=output:" + s[:-1]
            total_command = "in_port="+str(n+1)+",dl_src=" + actions
            list_flow.append(total_command)
    
    # [n+1, 2*n] - [n+1, 2*n]的流表
    for i in range(n, 2*n):
        z=""
        for j in range(2*n, 4*n, 2):
           if list_link[i][j]=='1':
               z=z+str(int(j/2)+1-n)+","
        z = z + str(n+1)
        total_command= "in_port="+ str(i+1-n) + ",actions=output:"+z
        list_flow.append(total_command)

     
if __name__ == '__main__':

    dt=datetime.now()
    num=dt.hour*60+dt.minute
    count = 10; #文件序列号
    #while True:
    while count<21:
       flag=num
       dt=datetime.now()
       num=dt.hour*60+dt.minute+1
       if flag==num:
            continue
       
       diff_1 = datetime.now()
       configurate_time_start = diff_1.second #配置开始时间戳

       #file_link ='/home/xidian1208/Desktop/Manet720/routingp/link_1600/'+str(num)+'.txt'
       file_link ='/home/xidian1208/Desktop/Manet720/routingp/link_1600/'+str(count)+'.txt'
       list_link=[]

       #读取文件
       with open(file_link, 'r+', encoding='utf-8') as file_obj:
           for content in file_obj:
               out_put = content.rstrip()
               if len(out_put):
                  list_link.append(out_put)
       list_flow=[]
       
       add_flow(list_link, 400)
             
       print("start write file")
    
       #对 flow_table 进行写入
       filename = "/root/LEO-Satellite-Network-Emulation-System/server2/flow_table"
       with open(filename, 'w+') as file_object:
            for i in range(len(list_flow)):
                 file_object.write(list_flow[i] + "\n")  
       
       print("finished write file")

       os.system('ovs-ofctl add-flows br0 flow_table')              
       os.system('ovs-ofctl dump-flows br0') 

       diff_2 = datetime.now()
       configurate_time_end = diff_2.second #配置结束时间戳
       
       flag=num
       
       #打印说明
       print(' * Link on / off setting completed')
       #print(' * The serial number of the currently read file is '+str(num))
       print(' * The serial number of the currently read file is '+str(count))
       print(' * The configuration time is '+str(configurate_time_end-configurate_time_start)+'s')
       print(' Waitting for the next state transition ……………………………………………………………………………………')
       print(' ')

       count = count + 1


