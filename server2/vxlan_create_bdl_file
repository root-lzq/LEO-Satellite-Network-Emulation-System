#!/usr/bin/python3.6

#生成vxlan_create_bdl_file

from multiprocessing import Pool
from datetime import datetime
import os
import concurrent.futures

def name_id(number):
    # 获取容器短id
    #【参数】number : int
    # 【返回值】result: string

    import subprocess
    string = ' "name=^b' + str(number) + '$"'
    total_string = "docker ps -aqf{}".format(string)
    result=subprocess.getoutput(total_string)
    return result



def mul_bdl(i):
    # 生成容器时延配置文件
    #【参数】list_delay : 时延string数组，每一行是时延矩阵的一行
    #【参数】 i: 容器序列号-1; [0,n-1];
    os.system('mkdir /root/LEO-Satellite-Network-Emulation-System/server1/mapping/b'+str(i+1))
    for file_num in range(11, 21): # 文件个数区间 【11， 21】
         file_delay='/root/1600_delay/'+str(file_num)+'.txt'
         list_delay =[] #时延数组，每一行是时延矩阵的一行

         with open(file_delay, 'r+', encoding='utf-8') as file_obj:
              for content in file_obj:
                   out_put = content.rstrip()
                   if len(out_put):
                       list_delay.append(out_put)
         
         list_delay_split = list_delay[i].split() # 以空格为分割符，获得时延矩阵的每一行的时延参数数组
         output_list = []

         for j in range(len(list_delay_split)):
             if list_delay_split[j] != '0.00000':
                 output_list.append(j) #out_put存储时延不为0的元素序列号（ j>=0）; int

         list_bdl = [] #存储带宽时延的数组

         #建立带宽时延队列
         list_bdl.append(' qdisc add dev eth0 handle 1: root htb')
         
         for m in range(len(output_list)):
             bandwidth_class = ' class add dev eth0 parent 1: classid 1:'+str(m+1)+' htb rate 10mbit ceil 10mbit'
             list_bdl.append(bandwidth_class)

             delay = int(float(list_delay_split[output_list[m]]) * 1000)
             delay_qdisc = ' qdisc add dev eth0 parent 1:' +str(m+1)+" handle "+str(10*(m+1))+": netem delay "+str(delay)+"ms"
             list_bdl.append(delay_qdisc)

             ip_now = '10.0.'+str(int( (output_list[m]+1) / 254)) + '.'+ str( (output_list[m]+1) % 254 + 1)
             filter_ip =' filter add dev eth0 protocol ip parent 1:0 u32 match ip dst '+ ip_now +" flowid 1:"+str(m+1)
             list_bdl.append(filter_ip)

         filename ='/root/LEO-Satellite-Network-Emulation-System/server1/mapping/b'+str(i+1)+'/'+str(file_num)+'.txt' 
         #将每个docker对应的网卡队列命令写入到mapping文件的对应文件中
         with open(filename, 'w+') as file_object:
             for n in range(len(list_bdl)):
                 file_object.write(list_bdl[n] + "\n")



if os.path.exists('./mapping') == True:
    os.system('rm -rf mapping')
os.system('mkdir /root/LEO-Satellite-Network-Emulation-System/server1/mapping')

#多进程程序
list_order = []
for i in range(400):
    list_order.append(i)

with Pool(40) as pool:
     pool.map(mul_bdl, list_order)

